
'use client';

import { useMemo, useState } from 'react';
import toast from 'react-hot-toast';
import { calculateTradePnL } from '@/utils/tradeCalculations';
import { formatCurrency, formatPnL } from '@/utils/formatCurrency';
import TradeForm from '@/components/TradeForm';
import TradeList from '@/components/TradeList';
import SummaryChart from '@/components/SummaryChart';
import CumulativeChart from '@/components/CumulativeChart';
import TradeProportionChart from '@/components/TradeProportionChart';
import PnLLineChart from '@/components/PnLLineChart';
import DetailedStatsCard from '@/components/DetailedStatsCard';
import AIAnalysis from '@/components/AIAnalysis';
import CapitalInput from '@/components/CapitalInput';
import DataManager from '@/components/DataManager';
import APIKeySettings from '@/components/APIKeySettings';
import { ConfirmModal } from '@/components/Modal';
import { useTrades, useCapital, Trade } from '@/hooks/useLocalStorage';

export default function Home() {
  const { trades, addTrade, deleteTrade, clearAllTrades, importTrades, replaceAllTrades, statistics } = useTrades();
  const { baseCapital, updateCapital, setCapital } = useCapital();
  
  const [modals, setModals] = useState({
    clearAll: false,
    import: { isOpen: false, data: null as Trade[] | null }
  });

  const totalCapital = baseCapital + statistics.totalPnl;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleImportTrades = (importedTrades: Trade[]) => {
    setModals(prev => ({ ...prev, import: { isOpen: true, data: importedTrades } }));
  };

  const confirmImport = () => {
    if (modals.import.data) {
      importTrades(modals.import.data);
      toast.success(`‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ${modals.import.data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, {
        icon: 'üì•',
        duration: 4000,
      });
    }
    setModals(prev => ({ ...prev, import: { isOpen: false, data: null } }));
  };

  const closeImportModal = () => {
    setModals(prev => ({ ...prev, import: { isOpen: false, data: null } }));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å backup
  const handleRestoreBackup = (backupData: { trades: Trade[], capital: number }) => {
    replaceAllTrades(backupData.trades);
    setCapital(backupData.capital);
    toast.success('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', {
      icon: 'üîÑ',
      duration: 4000,
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const handleClearAllTrades = () => {
    if (trades.length === 0) {
      toast.error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏ö', {
        icon: '‚ùå',
      });
      return;
    }
    setModals(prev => ({ ...prev, clearAll: true }));
  };

  const confirmClearAll = () => {
    clearAllTrades();
    toast.success('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', {
      icon: 'üóëÔ∏è',
      duration: 4000,
    });
    setModals(prev => ({ ...prev, clearAll: false }));
  };

  const closeClearAllModal = () => {
    setModals(prev => ({ ...prev, clearAll: false }));
  };

  return (
    <>
      <main className="min-h-screen bg-gray-950 p-2 sm:p-4 lg:p-8 text-white">
        <div className="mx-auto max-w-7xl rounded-xl bg-gray-900 p-4 sm:p-6 md:p-8 lg:p-10 shadow-2xl">
          <h2 className="mb-6 text-center text-xl sm:text-2xl lg:text-3xl xl:text-4xl font-extrabold tracking-tight text-yellow-400 flex items-center justify-center gap-3">
            <div className="flex items-center gap-2">
              <span className="text-2xl sm:text-3xl">üìä</span>
            </div>
            <span className="leading-tight">
              ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á
            </span>
          </h2>

          {/* ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì */}
          <div className="mb-8 rounded-lg bg-blue-900/20 border border-blue-500/30 p-4">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-blue-400">‚ÑπÔ∏è</span>
              <h3 className="text-base sm:text-lg font-semibold text-blue-400">
                ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
              </h3>
            </div>
            <div className="text-xs sm:text-sm text-gray-300 space-y-1">
              <p>
                ‚Ä¢ <strong>1 Lot</strong> = 100 ‡∏≠‡∏≠‡∏ô‡∏ã‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
              </p>
              <p>
                ‚Ä¢ <strong>‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô</strong> = (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≠‡∏Å - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤) √ó
                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Lot √ó 100 ‡∏≠‡∏≠‡∏ô‡∏ã‡πå
              </p>
              <p>
                ‚Ä¢ <strong>‡∏£‡∏≤‡∏Ñ‡∏≤</strong> ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô USD ‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡∏ã‡πå
              </p>
              <p>
                ‚Ä¢ <strong>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</strong> Buy 0.1 lot ‡∏ó‡∏µ‡πà $2,000, ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà
                $2,010 = ($2,010 - $2,000) √ó 0.1 √ó 100 = $100
              </p>
            </div>
          </div>

          <div className="flex flex-col gap-6 lg:gap-8">
            <CapitalInput
              initialCapital={baseCapital}
              onUpdateCapital={updateCapital}
            />

            {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
            <div className="rounded-xl bg-gray-800 p-4 sm:p-6 shadow-lg">
              <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-4">
                <h2 className="text-xl sm:text-2xl font-bold text-white">
                  ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°
                </h2>
                {trades.length > 0 && (
                  <button
                    onClick={handleClearAllTrades}
                    className="rounded-lg bg-red-600 px-4 py-2 text-sm font-semibold text-white shadow-md transition duration-300 ease-in-out hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-75 w-full sm:w-auto"
                  >
                    ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                  </button>
                )}
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-gray-700 rounded-lg p-4">
                  <p className="text-sm text-gray-400">‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</p>
                  <p className="text-lg sm:text-xl font-bold text-yellow-400">
                    {formatCurrency(baseCapital)}
                  </p>
                </div>

                <div className="bg-gray-700 rounded-lg p-4">
                  <p className="text-sm text-gray-400">‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°</p>
                  <p
                    className={`text-lg sm:text-xl font-bold ${
                      statistics.totalPnl >= 0
                        ? "text-green-400"
                        : "text-red-400"
                    }`}
                  >
                    {formatPnL(statistics.totalPnl)}
                  </p>
                </div>

                <div className="bg-gray-700 rounded-lg p-4">
                  <p className="text-sm text-gray-400">‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</p>
                  <p className="text-lg sm:text-xl font-bold text-yellow-400">
                    {formatCurrency(totalCapital)}
                  </p>
                </div>

                <div className="bg-gray-700 rounded-lg p-4">
                  <p className="text-sm text-gray-400">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                  <p className="text-lg sm:text-xl font-bold text-blue-400">
                    {statistics.totalTrades}
                  </p>
                </div>

                <div className="bg-gray-700 rounded-lg p-4">
                  <p className="text-sm text-gray-400">‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡πÑ‡∏£</p>
                  <p className="text-lg sm:text-xl font-bold text-green-400">
                    {statistics.winningTrades}
                  </p>
                </div>

                <div className="bg-gray-700 rounded-lg p-4">
                  <p className="text-sm text-gray-400">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞</p>
                  <p className="text-lg sm:text-xl font-bold text-purple-400">
                    {statistics.winRate.toFixed(1)}%
                  </p>
                </div>
              </div>
            </div>

            {/* ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
            <DataManager
              trades={trades}
              capital={baseCapital}
              onImportTrades={handleImportTrades}
              onRestoreBackup={handleRestoreBackup}
            />

            {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î */}
            <TradeForm onAddTrade={addTrade} />

            {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î */}
            <TradeList trades={trades} onDeleteTrade={deleteTrade} />

            {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡πà‡∏≤‡∏á‡πÜ */}
            <div className="grid grid-cols-1 xl:grid-cols-2 gap-6 lg:gap-8">
              <SummaryChart trades={trades} />
              <CumulativeChart trades={trades} />
            </div>

            {/* ‡∏Å‡∏£‡∏≤‡∏ü Line Chart ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà */}
            <PnLLineChart trades={trades} />

            {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î */}
            <TradeProportionChart trades={trades} />

            {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å */}
            <DetailedStatsCard trades={trades} />

            {/* ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key */}
            <APIKeySettings />

            {/* ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI */}
            <AIAnalysis trades={trades} capital={baseCapital} />
          </div>
        </div>
      </main>

      {/* Clear All Confirmation Modal */}
      <ConfirmModal
        isOpen={modals.clearAll}
        onClose={closeClearAllModal}
        onConfirm={confirmClearAll}
        title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        message="‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
        details={`‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${trades.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£`}
        confirmText="‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        confirmVariant="danger"
        icon="‚ö†Ô∏è"
      />

      {/* Import Confirmation Modal */}
      <ConfirmModal
        isOpen={modals.import.isOpen}
        onClose={closeImportModal}
        onConfirm={confirmImport}
        title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        message={`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${
          modals.import.data?.length || 0
        } ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`}
        details={`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${trades.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà`}
        confirmText="‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        confirmVariant="success"
        icon="üì•"
      />
    </>
  );
}
